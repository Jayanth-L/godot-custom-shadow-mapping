[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode skip_vertex_transform,blend_mix,depth_draw_always,cull_back,unshaded,shadows_disabled,ambient_light_disabled;

varying highp vec4 vPositionViewSpace; // view space

uniform highp float uNear;
uniform highp float uFar;
uniform highp mat4 uLookAtView;

// packs a float into 3 components of a RGBA texture
vec3 pack24(float f) {
  vec3 bit_shift = vec3(256.0*256.0, 256.0, 1.0);
  vec3 bit_mask  = vec3(0.0, 1.0/256.0, 1.0/256.0);
  vec3 res = fract(f*bit_shift);
  res -= res.xxy * bit_mask;
  return res;
}

// MODELVIEW_MATRIX = INV_CAMERA_MATRIX*WORLD_MATRIX
void vertex() {
	highp vec4 vPositionLocal = vec4(VERTEX, 1.0); // local position
	highp vec4 vPositionGlobal = WORLD_MATRIX*vPositionLocal; // global position
	vPositionViewSpace = uLookAtView*vPositionGlobal; // view space (not clipped)
	VERTEX = vPositionViewSpace.xyz; // view space (not clipped)
}
void fragment() {
	highp float depth = (-vPositionViewSpace.z/vPositionViewSpace.w-uNear)/(uFar-uNear); // to range [0,1]
	highp vec3 color = pack24(depth);
	ALBEDO = color;
}"

[resource]
shader = SubResource( 1 )
shader_param/uNear = null
shader_param/uFar = null
shader_param/uLookAtView = null
